# numeric
x <- 10.5
class(x) 

x <- 10.5   # numeric
y <- 10L    # integer
z <- 1i     # complex

# integer
x <- 1000L
class(x)

# complex
x <- 9i + 3
class(x)

# character/string
x <- "R is exciting"
class(x)

# logical
x <- TRUE
class(x)

-6 

# Question 1

# Set the significance level
alpha <- 0.01

# Calculate the sample means and standard deviations for boys and girls
boys_mean <- 66
boys_sd <- 10
girls_mean <- 70
girls_sd <- 8

# Calculate the sample sizes for boys and girls
boys_n <- 64
girls_n <- 100 - boys_n

# Calculate the pooled standard deviation
pooled_sd <- sqrt(((boys_n - 1) * boys_sd^2 + (girls_n - 1) * girls_sd^2) / (boys_n + girls_n - 2))

# Calculate the test statistic and p-value
test_statistic <- (girls_mean - boys_mean) / (pooled_sd * sqrt(1/boys_n + 1/girls_n))
p_value <- pt(test_statistic, df = boys_n + girls_n - 2, lower.tail = FALSE) * 2

# Print the results of the hypothesis test
if (p_value < alpha) {
  cat("Girls performed better than boys (p-value =", p_value, ")\n")
} else {
  cat("Girls did not perform better than boys (p-value =", p_value, ")\n")
}

# Question 2

# Sample sizes and numbers of defectives
n1 <- 300
n2 <- 100
x1 <- 48
x2 <- 24

# Calculate sample proportions
p1 <- x1 / n1
p2 <- x2 / n2

# Calculate pooled proportion
p_pool <- (x1 + x2) / (n1 + n2)

# Calculate test statistic (Z-score)
Z <- (p1 - p2) / sqrt(p_pool * (1 - p_pool) * ((1 / n1) + (1 / n2)))

# Calculate critical Z-value at 5% level of significance
z_crit <- qnorm(0.05/2, lower.tail = FALSE)

# Determine if null hypothesis should be rejected
if (Z > z_crit) {
  print("The first machine is better than the second machine at the 5% level of significance.")
} else {
  print("There is not enough evidence to conclude that the first machine is better than the second machine at the 5% level of significance.")
}

# Question 3

# Sample sizes and statistics
n1 <- 100
n2 <- 120
xbar1 <- 1200
s1 <- 70
xbar2 <- 1150
s2 <- 85

# Calculate the pooled standard deviation
s_pool <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2))

# Calculate the test statistic (t-score)
t <- (xbar1 - xbar2) / (s_pool * sqrt(1/n1 + 1/n2))

# Calculate the degrees of freedom
df <- n1 + n2 - 2

# Calculate the critical t-value at a 5% level of significance
t_crit <- qt(0.025, df, lower.tail = FALSE)

# Determine if null hypothesis should be rejected
if (t > t_crit) {
  print("Brand A bulbs are superior to Brand B bulbs at the 5% level of significance.")
} else {
  print("There is not enough evidence to conclude that Brand A bulbs are superior to Brand B bulbs at the 5% level of significance.")
}

# Question 4

# Sample statistics
n <- 900
xbar <- 3.47

# Hypothesis test for population mean of 3.23 cm
mu0 <- 3.23
sigma <- 1/sqrt(n) * sqrt(sum((xbar - mu0)^2))
z_score <- (xbar - mu0) / sigma
p_value1 <- 2 * pnorm(-abs(z_score))
cat("For a population mean of 3.23 cm:\n")
cat("z-score:", z_score, "\n")
cat("p-value:", p_value1, "\n")
if (p_value1 < 0.05) {
  cat("The sample cannot be regarded as a simple sample from a population with mean 3.23 cm.\n")
} else {
  cat("The sample can be regarded as a simple sample from a population with mean 3.23 cm.\n")
}

# Hypothesis test for population mean of 2.31 cm
mu0 <- 2.31
sigma <- 1/sqrt(n) * sqrt(sum((xbar - mu0)^2))
z_score <- (xbar - mu0) / sigma
p_value2 <- 2 * pnorm(-abs(z_score))
cat("\nFor a population mean of 2.31 cm:\n")
cat("z-score:", z_score, "\n")
cat("p-value:", p_value2, "\n")
if (p_value2 < 0.05) {
  cat("The sample cannot be regarded as a simple sample from a population with mean 2.31 cm.\n")
} else {
  cat("The sample can be regarded as a simple sample from a population with mean 2.31 cm.\n")
}


-3 Computation of Tables and Graphs -Summary Statistics in R Programming

x=c(15,25,35,45,55,65)
y=c(302.38, 193.63, 185.46, 198.49, 224.30, 288.71)
vx=var(x)
vx
vy=var(y)
vy
vxy=var(x,y)
vxy
cxy=vxy/(sqrt(vx)*sqrt(vy))
cxy
cor(x,y)
round(cor(x,y),3)
p=c(23,27,28,28,29,30,31,33,35,36)
q=c(18,20,22,27,21,29,27,29,28,29)
cor.test(p,q, method="Pearson")
cor.test(p,q, method="spearman")
lm(p~q)
lm(q~p)
model=lm(p~q)
summary.lm(model)

sample(1:100,5)
sample(1:6,10,replace=T)
sample(c('H','T'),10,replace=T)
dice=as.vector(outer(1:6,1:6))
dice
dice=as.vector(outer(1:6,1:6,paste))
dice
x=c(0,1,2,3)
p=c(1/8,3/8,3/8,1/8)
mean=sum(x*p)
mean
variance=sum((x^2*p)-(mean^2))
variance
dbinom(2,size=10,prob=1/6)
dbinom(2,10,1/6)
choose(10,2)*(1/6)^2*(5/6)^8
probs=dbinom(x=c(0:10),size=10,prob=1/6)
probs
x=c(0:10)
data.frame(x,probs)
pbinom(3,10,1/6)
dbinom(0,10,1/6)+dbinom(1,10,1/6)+dbinom(2,10,1/6)+dbinom(3,10,1/6)
cprobs=pbinom((0:10),size=10,prob=1/6)
cprobs=round(cprobs,3)
cprobs
data.frame(x,probs,cprobs)
x=0:50
y=dbinom(x,size=50,prob=0.33)
plot(x,y,type="h")
dbinom(4,size=12,prob=0.2)
dbinom(2,20,0,10)

- 2 table graph

mydata = read.csv("C://Users//student//Documents//lab.csv")
mydata
empid = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
age = c(30, 37, 45, 32, 50, 60, 35, 32, 34, 43, 32, 30, 43, 50, 60)
sex = c(0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0 )
status = c(1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2 )
empinfo = data.frame(empid, age, sex, status)
empinfo
empinfo$empid
empinfo$sex = factor(empinfo$sex, labels=c("male", "female"))
empinfo$status = factor(empinfo$status, labels=c("staff", "faculty"))
sexm = subset(empinfo, empinfo$sex == 'male')
sexm
summary(empinfo)

table1 = table(empinfo$sex)
table1
table2 = table(empinfo$sex, empinfo$status)
table2
plot(
 empinfo$age,
 type="l",
 main="age of subjects",
 xlab="empid",
 ylab="years",
 col="blue")
pie(table1)
barplot(table2, )
barplot(empinfo$age)
table5 = table(empinfo$sex, empinfo$status)
barplot(table5, beside=T, xlim=c(1, 15), ylim=c(0, 5), col=c("blue", "red"))
legend("topright", legend=rownames(table2), fill=c("blue", "red"))
boxplot(empinfo$age,empinfo$status, col=c("blue", "red"))

- 4

px = dbinom(0:7,7,1/4)
px
x=c(0:7)
x
mean=sum(x*px)
mean
varx=sum(x^2*px)-mean^2
varx
Ex=7*1/4
Ex
vr=7*1/4*3/4
vr
dpois(5,7)
dpois(0:5,7)
ppois(0:5,7)
round(ppois(0:100,7),2)
x=c(0:100)
px=dpois(x,4)
ex=sum(x*px)
vrx=sum(x^2*px)-ex^2
ex
vrx
p=data.frame(0:10,2),ppoints(0:10,2),ppois(0:10,2)
p
pr=i-ppois(16,12)
pr
ppois(x,2)
round(p,4)
ppois(6,2)
ppois(10,2)
1-ppois(6,2)
data.frame(0:10,dpois(10,2))
plot(0:10,dpois(0:10,2),type='h',xlab = "y", ylab="p(y)",main="poisson Distribution")

